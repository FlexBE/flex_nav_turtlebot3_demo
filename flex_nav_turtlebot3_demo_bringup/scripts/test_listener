#!/usr/bin/env python3
"""
Script used to test ROS 2 Python-based TF2 TransformListener 

Reports the delay of latest transform from base to global frame (e.g. base_footprint-->odom-->map) relative 
to the current ROS time 

"""
import sys
import traceback

import rclpy
from rclpy.node import Node

from tf2_ros import TransformException
from tf2_ros.buffer import Buffer
from tf2_ros.transform_listener import TransformListener

class TestListener(Node):

    def __init__(self, name='test_listener'):
        super().__init__(name)


        self.odom_frame = self.declare_parameter('odom_frame', 'odom').get_parameter_value().string_value
        self.base_frame = self.declare_parameter('base_frame', 'base_footprint').get_parameter_value().string_value
        self.global_frame = self.declare_parameter('map_frame', 'map').get_parameter_value().string_value
        self.tolerance = self.declare_parameter('transform_tolerance', 0.100).get_parameter_value().double_value
        self.timer_period_s = self.declare_parameter('timer_period_s', 0.067).get_parameter_value().double_value

        self.tf_buffer = Buffer()
        self.tf_listener = TransformListener(self.tf_buffer, self)

        self.update_timer = self.create_timer(self.timer_period_s, self.update_cb)

        self._cnt = 0 
        self._deltas = 100*[0.01] 

    def update_cb(self):

        try:
            # Find latest inverse transform of odom frame in base frame
            tbg = self.tf_buffer.lookup_transform(
                    self.base_frame,  # to frame
                    self.global_frame,  # from frame
                    rclpy.time.Time()) # Get the latest transform available
        except TransformException as ex:

            self.get_logger().error(
                    f'\n\nCould not transform {self.odom_frame} to {self.base_frame}: {ex}')
            return 

        delta = (self.get_clock().now() - rclpy.time.Time.from_msg(tbg.header.stamp)).nanoseconds/1.e9
        self._deltas[self._cnt%len(self._deltas)] = delta

        if delta > self.tolerance:
            self.get_logger().error("Transform from %s to %s is too old delta=%.3f ns ts=%s now=%s - failed!" % (self.base_frame, self.global_frame, delta, str(tbg.header.stamp), str(self.get_clock().now().to_msg()) ))
        elif self._cnt % 20 == 0:
            avg = 0
            for delta_i in self._deltas:
                avg += delta_i
            avg /= len(self._deltas) 
            self.get_logger().error("Transform from %s to %s delta=%.3f last 100: avg(%.3f) min(%.3f) max(%.3f) %d" % 
                                    (self.base_frame, self.global_frame, delta,  
                                     avg, min(self._deltas), max(self._deltas), self._cnt))
        self._cnt += 1


def main(args=None):
    rclpy.init(args=args)
    node = TestListener('test_listener')
    node.get_logger().info(f'{node.get_name()} - begin processing transforms ...')
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
       print("Keyboard interrupt!")
       pass
    except Exception as exc:  # pylint: disable=W0703
        print(f"Exception from executor: {type(exc)}\n{exc}")
        print(f"{traceback.format_exc(exc).replace('%', '%%')}")

    try:
        node.destroy_node()
    except Exception as exc:  # pylint: disable=W0703
        print(f"Exception from destroy_node: {type(exc)}\n{exc}")
        print(f"{traceback.format_exc(exc).replace('%', '%%')}")

    try:
        print(f"Shut down test_listener!")
        rclpy.try_shutdown()
    except Exception as exc:  # pylint: disable=W0703
        print(f"Exception from rclpy.shutdown: {type(exc)}\n{exc}")
        print(f"{traceback.format_exc().replace('%', '%%')}")



if __name__ == "__main__":
    main(args=sys.argv)
